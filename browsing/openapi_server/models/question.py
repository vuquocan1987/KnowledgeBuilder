from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Question(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, content=None):  # noqa: E501
        """Question - a model defined in OpenAPI

        :param id: The id of this Question.  # noqa: E501
        :type id: int
        :param content: The content of this Question.  # noqa: E501
        :type content: str
        """
        self.openapi_types = {
            'id': int,
            'content': str
        }

        self.attribute_map = {
            'id': 'id',
            'content': 'content'
        }

        self._id = id
        self._content = content

    @classmethod
    def from_dict(cls, dikt) -> 'Question':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Question of this Question.  # noqa: E501
        :rtype: Question
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Question.

        Unique identifier for the question.  # noqa: E501

        :return: The id of this Question.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Question.

        Unique identifier for the question.  # noqa: E501

        :param id: The id of this Question.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def content(self) -> str:
        """Gets the content of this Question.

        The content of the question.  # noqa: E501

        :return: The content of this Question.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Question.

        The content of the question.  # noqa: E501

        :param content: The content of this Question.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content
